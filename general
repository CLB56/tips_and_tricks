# Sur l'architecture des disques

## Le MBR je pense que j'ai bien compris

Le MBR est le premier secteur de 512 octets (LBA 0 - pour le moment encore les secteur de disques sont tous de 512 octets)
Il contient la table de partitionnement qui précise notemment quelle partition est bootable.
Ce MBR contient aussi un peu de code du bootloader (donc un peu de code de GRUB) mais il n'y a pas assez de place pour mettre 
tout le code nécessaire à la compréhension d'un systeme de fichier.
Donc ensuite l'ordi lit :
- soit une partition qui na pas de file systeme mais du code binaire direct (j'ai jamais vu cela mais il parait que cela existe)
- soit la zone morte avant le block 64 (donc jusqu'au block 63) qui elle peut etre suffisant pour décrire comment comprendre un systeme de fichier
...et ca peut etre directement du ext4.

Donc sur un systeme BIOS-MBR, le code de GRUB qui sert au démarrage est dans le MBR et dans la dead zone.

Ensuite le dossier /boot (qui peut etre soit un simple dossier de / soit une patition séparée- qui peut etre ext4)
Ce dossier boot en fait contient le cfg de grub.
grub lit ce fihcier de configuration.
Mais attention sous linux apres une modification du cfg on peut assi utilser une commande pour venir ecrire dans le MBR et la deadzone.
Mais lorsqu'on utilise la command linux pour déployer ce cfg ca ecrase bien dans le MBR et dans la zone morte!

## Le GPT

Un PC n'ayant pas de BIOS mais suivant la norme UEFI peut lire un disque uniquement formaté avec un MBR (un vieux disque donc). il va le lire comme a l'ancienne.
Mais un PC Bios qui lit un disque GPT va rencontrer un MBR protecteur qui ndiquera une seule grosse partition, il va rien comprendre et ne pourra pas booter.

Sur un disaue GPT, le MBR existe toujours, mais il donne comme partition active la partition "EFI".

Le GPT qui contient la table de partitionnement se trouve entre le block 1 et le block 33. Après il y a les partitions.
Le GPT est répété à la toute fin du disque.
Le GPT va indiqué les Partitions qui sont flagé ESP. Ceux sont des partitions de boot.

Les partitions ESP doivent etre en FAT. Le firmwaure UEFI comprend le FAT32 (il se trouve sur une EPROOM de taille bien plus grosse que ce qu'on faisait du temps du BIOS.
Du coup il y a la place pour mettre de quoi comprendre un FS FAT32.

Inutile d'apprendre LVM et les partitions logiques. Avec l'UEFI il n'y a plus de restrictions, on fait autant de partition primaires qu'on veut.


# Sur l'installation de linux et sa sauvegarde

J'ai l'impression que les installateurs depuis une version live prennent en compte si l'ordi est BIOS ou UEFI. Donc l'idéal est de faire l'installation depuis l'ordi 
ou on utilisera ce linux.

Inutile de se prendre la tete a faire un partitionnement compliqué pour un ordi perso. Une partition / qui contient tout (y compris home et boot).
De toute façon, il y a pas mal d'extensions (libreoffice, mozilla) et de fichier de reglages (gpg, vim, ssh...) qui vont se mettre en fichier cachés dans home.
Donc on peut dire que home n'est pas vraument indépendant de ce qu'on fait dans /.
La partition boot separé ? A quoi bon si on fait des sauvegarde compl_ètes du disque régulières avec clonezilla.

il vaut mieux avoir une clé clonezilla et sauvegarder le disque entier du PC.
Clonezilla en afit sauve le MBR et les partitions une a une.
Je ne sais pas si la zone morte est sauvé sur un disque MS-DOS/MBR simple.
Par contre un disaue de 250 GO a sauver ca ne fera pas une sauvegarde de 250Go. Le systeme est intélligent et si le disque n'est pas plein, clonezilla le comprend.
On peut donc sauvegarder sur un support beaucoup plus petit.


# Sur XFCE

faire que lorsqu'on se connecte avec un compte utilisateur il ne demande plus si on veut reprendre la sessions précedente de cet utilisateur ou une nouvelle session :
Paramètre - Edition de paramètres - XFCE4 session - Chooser - Always display : décocher

Pour se mettre en autologin :
- la résolution on peut la changer via l'interface graphique (ce ne sera valable que pour ce compte utilisateur)

il faut éditer : /etc/lightdm/lightdm.conf
Dans la section [Seat:*] il faut décommenter juset cette ligne
autologin-user=username (ici mettre son nom de compte)

puis on se rajoute au groupe auto-login et un truc compliqué (qui serait lié au PAM...c'est bien pour rentrer un MDP en automatique)
groupadd -r autologin
gpasswd -a username autologin

Ensuite si on ne veut pas que le systeme se souvienne des fenetre ouverte lors de la précdente session, on peut le faire via le GUI : 
Open Session and Startup from Menu - > Settings -> Settings Manager.
Untick the Automatically save sessions on logout under Logout Settings

J'ai pas testé encore

Theme windows 10 :
git clone https://github.com/B00merang-Project/Windows-10.git
sudo mv Windows-10 /usr/share/themes/
On va dans parametre apparences et on peut choisir le theme.
wget https://github.com/B00merang-Project/Windows-10/archive/3.2.zip
unzip $(ls)
sudo mv Windows-10-3.2 /usr/share/icons


# Essayer de faire une clé usb bootable

Le MBR c'est le premier secteur du disque.
Il contient la table de partitionnement : 4 partitions primaires  et pour chaque partition l'identifiant du systeme de fichier (code hexa standradisé)
Il contient un bootstrap code

LE Volume ou Partition Boot Record sur le premier secteur de la partition :
The code in volume boot records is invoked either directly by the machine's firmware or indirectly by code in the master boot record or a boot manager. 
Il contient du code de bootstrap
Il contient aussi le  BIOS Parameter Block  et je ne sais pas si ces parametres (utile uniquement sur un partition FAT) ne permettent pas de trouver le grub.cfg !
Je ne suis pas sur de moi ici.

Finalement je me rend compte qu'il faut utiliser syslinux qui est variment spécialé pour cela.
Sur un disque msdos tout me laisse à penser que tout le code de bootloading est dans le MBR et dans la zone morte.
Sur un disque uefi, c'est bien different et c'est mis dans la partition GPT.

Syslinux a plusieurs moyen d'identifier le disque :

Le partition name : il est dans la table de partition que ce soit un disque msdos ou uefi. J'ai l'impression que le partition name c'est juste sda1, sdb3, ... et donc
ca me parait peu fiable car le BIOS changes la lettre selon l'ordre dans lequel il detecte.
Le partition label : Sur un disqque msdos ce nom ne figure que dans la filesystem de la partition ...En uefi ce label se trouverait (en plus) dans la table de 
partition GPT. Mais une fois encore je pense que c'est que le label qui est dans le filesystem qui est utile. D'ailleurs pour le changer ne ligne de commande, il y a des commandes
differentes pour chaque filesystem.
L'UUID serait aussi dans le filesystem sur une partition GPT il est aussi stocké dans le GPT mais linux ne s'en sert pas.(a voir si sur un GPT on ne le retrouve pas dedans aussi mais ce serait en bonus)

https://blog.sleeplessbeastie.eu/2015/12/07/how-to-create-bootable-usb-flash-drive/
Très bon site mais c'est pour lancer des iso après.
Mais l'idée est bonne.
Excellent site !! la procédure décrite marche!! Mais je n'ai pas encore fait la configuration à l'étape finale.

Tentative de chargement manuel avec Grub 2.04 :

On se positionne sur la bonne partition (qu'on a découverte avec la commande ls)
grub> root=(hd0,msdos1)
On charge le noyaux : 
grub> linux /vmlinuz root=/dev/sda2 (mais ici je ne comprends pas d'ou viend le /dev/sda2 et pourquoi cela)
On charge le RAMFS : 
grub> initrd /initrd.img
finalement, on boote : 
grub> boot

Deuxieme jour à galerer

apparemmet mes liens symboliques étaient cassés cd de vmlinuz et initrd qui sont à la racines.
pour le verifier j'ai utilsé une technique simple mais robuste : j'ai fait un sha1sum du fichier cible et du lien. Si c'est pas le même résiltat alors il ya  problème.

La version de grub tel que ur le Thinkpad (c'est a dire juste le MBR et la deadzone) est bien capable de comprendre l'ext4 car losque je fais un ls (hd0,msdos1)
Elle comprend ce qui se passe.



